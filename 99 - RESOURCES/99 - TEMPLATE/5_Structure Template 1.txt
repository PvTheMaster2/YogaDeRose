---
title: "{{title}}"
date:
  "{ date }": 
updated:
  "{ date }": 
aliases:
  - AGENT2.0
  - Revit Automation
  - Electrical Design Automation
  - Python for Revit
  - PyRevit Integration
  - Revit API Scripts
  - LangChain Orchestration
  - ChromaDB Vector Search
  - RAG Workflow
  - Command Parser Agent
  - Script Generator Agent
  - Validation Agent
  - Feedback Agent
  - Database Agent
  - Revit Electrical Parameters
  - Revit Script Validation
  - Revit Error Logs
  - Revit Workflow Automation
  - LLM Integration for Revit
  - Revit Project Optimization
lead: "{{lead_paragraph}}"
visual: "![[NotebookLM Mind Map.png]]"
template_type: Documentation
template_version: "1.0"
status: Draft
priority: High
tags:
  - automation
  - revit
  - electrical-design
  - agent-orchestration
  - command-parser
  - script-generator
  - validation-agent
  - pyrevit
  - python
  - langchain
  - chromadb
  - vector-search
  - embedding
  - RAG
  - LLM
  - gpt-4
  - claude
  - workflow
  - database-agent
  - templater
  - dataview
  - cache-management
  - error-handling
  - logging
  - performance-metrics
  - API-integration
  - prompt-engineering
  - ironpython
  - revit-api
  - documentation
created: 2025-04-08T16:18
---

# {{title}}

## 1. Introduction

{{lead_paragraph}}

**Project Objectives:**
- Reduzir o tempo gasto em tarefas gráficas manuais
- Diminuir a curva de aprendizado do Revit através de comandos em linguagem natural
- Automatizar a geração, validação e correção de scripts para Revit

## 2. Context and Project Architecture

### 2.1 Tools and Technologies
- **Language:** Python 3.12, IronPython 2.7 (para Revit)
- **Software:** Autodesk Revit 2024
- **Integration:** PyRevit
- **Frameworks:** LangChain
- **Database:** ChromaDB (armazenamento vetorial e buscas semânticas)
- **LLMs:** GPT-4, Claude 3.5

### 2.2 Architecture Based on Agents
- **[[OrchestratorAgent]]:** Coordena o fluxo desde o comando até execução
- **[[CommandParserAgent]]:** Interpreta comandos em linguagem natural
- **[[DatabaseAgent]]:** Gerencia consultas semânticas e embeddings
- **[[ScriptGeneratorAgent]]:** Gera scripts Python
- **[[ValidationAgent]]:** Valida e corrige scripts via feedback
- **[[FeedbackAgent]]:** (Futuro) Armazena exemplos validados

## 3. Workflow and Processes

- **Input:** Comando via ambiente PyRevit
- **Processing:** Orquestração e distribuição entre agentes
- **Generation:** Criação do script com validação prévia
- **Validation:** Análise de logs e correção iterativa
- **Execution:** Implementação no Revit com feedback

## 4. Project Structure

```
PROJETO_DIPLOMACAO/
├── agents/
│   ├── orchestrator/
│   ├── command_parser/
│   ├── database/
│   ├── script_generator/
│   ├── validation/
│   └── feedback/
├── config/
├── docs/
├── data_logs/
├── utils/
├── .env
├── requirements.txt
├── main.py
└── botao_revit.py
```

## 5. Development Guidelines

- **Code Standards:** PEP 8, typing hints, docstrings
- **Logging:** Sistema robusto de logs e cache
- **Testing:** Validação iterativa de scripts
- **Integration:** Transações e error handling no Revit

## 6. Implementation Examples

```python
import clr
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import BuiltInParameter

# Exemplo de acesso a parâmetros do Revit
def get_circuit_number(elemento):
    param = elemento.get_Parameter(BuiltInParameter.RBS_ELEC_CIRCUIT_NUMBER)
    return param.AsString() if param else "Não encontrado"
```

## 7. Documentation Links

- [[Revit API Documentation]]
- [[PyRevit GitHub]]
- [[LangChain Docs]]
- [[ChromaDB Documentation]]

## 8. Future Considerations

- **Testing:** Implementar testes unitários e de integração
- **RAG:** Refinar processos de chunking e embeddings
- **UI:** Desenvolver dashboards de monitoramento
- **Database:** Expandir base de conhecimento

---

## Back Matter

**Sources**
- Project Documentation
- API References
- Development Guidelines

**References**
- [[AGENT2.0]]
- [[Revit API]]
- [[PyRevit]]
- [[LangChain]]

**Notes**
- Template customizado para projeto de automação Revit
- Manter documentação atualizada com desenvolvimento
- Revisar e atualizar tags conforme evolução do projeto